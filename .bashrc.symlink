# .bashrc

export VISUAL=vim
export EDITOR=vim

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

if [ -f /etc/.bashcompletion ]; then
	. /etc/bash_completion
fi

PROMPT_DIRTRIM=3
# credits to: https://coderwall.com/p/fasnya/add-git-branch-name-to-bash-prompt
parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
	
}
export PS1="\u@\h:\[\033[97m\]\w\[\033[36m\]\$(parse_git_branch)\[\033[00m\]$ "

# duplicate command lines
export HISTIGNORE=ignoreboth:erasedups

whattimeisit(){
	m=$(date +%M)
	h=$(date +%H)
	if [ "$h" -eq 0 ]; then
		hour="midnight"
	fi
	if [ "$m" -eq 15 ]; then
		current_time="It's quarter past $h"
	elif [ "$m" -eq 30 ]; then
		current_time="It's half past $h"
	elif [ "$m" -eq 45 ]; then
		current_time="It's quarter to $(($h + 1))"
	else 
		current_time="It's $m past $h"
	fi
	echo "$current_time"| espeak &
}

espanol(){
	if [ "$#" -eq 0 ]; then
		vim ~/espanol.txt
	else 
		# test if the word is not previously defined
		if ! grep -q "^$1" ~/espanol.txt ; then 
			echo "$1: ${@:2}" >> ~/espanol.txt
		else 
			grep "^$1" ~/espanol.txt --color=auto
		fi
	fi
}

# git pull in all existing repositories
pull_all(){
	repos=(`find ~ -name '*.git'`)
	for repo in "${repos[@]}"; do
		repo=$(echo "$repo"| sed -e 's/\.git//g')
		printf "\033[00;32m$repo\033[0m ... "
		cd && cd "$repo" && git pull 2> /dev/null|grep -v "Already up-to-date"
		if [ "$?" -ne 0 ]; then
			echo ""
		fi
	done
	cd
}

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# # # #  # # # # # ## PROJET_GL
PATH=/matieres/4MMPGL/GL/global/bin:"$PATH"
PATH=$HOME/2A/Projets/Projet_GL/src/main/bin:"$PATH"
PATH=$HOME/2A/Projets/Projet_GL/src/test/script:"$PATH"
PATH=$HOME/2A/Projets/Projet_GL/src/test/script/launchers:"$PATH"
PATH=$HOME/2A/Projets/Projet_GL/global/bin:"$PATH"
export PATH
export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_1/

PATH=~/github/weatherspeaker:"$PATH"
PATH=~/github/blablacar:"$PATH"

