# .bash_functions

whattimeisit(){
	m=$(date +%M)
	h=$(date +%H)
	if [ "$h" -eq 0 ]; then
		hour="midnight"
	fi
	if [ "$m" -eq 15 ]; then
		current_time="It's quarter past $h"
	elif [ "$m" -eq 30 ]; then
		current_time="It's half past $h"
	elif [ "$m" -eq 45 ]; then
		current_time="It's quarter to $(($h + 1))"
	else 
		current_time="It's $m past $h"
	fi
    # only speak if espeak exists
    type "espeak" >/dev/null 2&>1 && echo "${current_time}" | espeak || echo "${current_time}"
}

# git pull in all existing (found) repositories
pull_all(){
	wc=$(pwd)
	repos=(`find ~ -name '*.git'`)
	for repo in "${repos[@]}"; do
		repo=$(echo "$repo"| sed -e 's/\.git//g')
		printf "\033[00;32m$repo\033[0m ... "
		cd && cd "$repo" && git pull 2> /dev/null|grep -v "Already up-to-date"
		if [ "$?" -ne 0 ]; then
			echo ""
		fi
	done
	cd "$wd"
}

klit(){
	if [ "$#" -eq 0 ]; then
		sed '1!G;h;$!d' ~/.achkliti |more
	else 
		echo "[$(date| sed -e 's/ (.*//g')] $@" >> ~/.achkliti
	fi
}

purge(){
	rm -rfv "$1"
}

backitup(){
	cd ~
	backup_time=$(date +%d%B%y)
	if [ -f ".backups/backup_$backup_time.tar.gz" ]; then
		rm -f ".backups/$backup_time.tar.gz"
	fi
	tar -zcf ".backups/backup_$backup_time.tar.gz" $(ls ~) >>/dev/null 2>&1 && dropbox_uploader.sh upload ".backups/backup_$backup_time.tar.gz" debian_backups && alert "Backup ended successfully."
}

# Swap two file names: $1 and $2
swap(){
	mv "$1" "$1_tmp"
	mv "$2" "$1"
	mv "$1_tmp" "$2"
}

# Find the max of a list of integers
# $1, ..., $n integers
max(){
	for number in "$@"; do echo "$number"; done| sort -nr| head -n 1
}

# Find the min of a list of integers
# $1, ..., $n integers
min(){
	for number in "$@"; do echo "$number"; done| sort -n| head -n 1
}

# automatic 'git push'
# Requires access without password to the repository.
# When provided, $1 contains the path to the local git repository.
# Otherwise, cwd is used.
autopush(){
	[[ "$#" -eq 1 ]] && cd "$1"
	if [[ ! -d '.git' ]] && [[ ! -d '../.git' ]]; then
		echo "$(tput bold)$(pwd)$(tput sgr0) is not a git directory." && return 1
	fi

	[[ "$#" -eq 2 ]] && commit_message="$2" ||\
	commit_message="[autopush] $(date "+%d %B %y - %H:%M")"
	git config user.email "nabilelqatib@gmail.com" ; git config user.name "marrakchino" 
	git commit -a -m "${commit_message}" && git push --quiet
	[[ "$?" -eq 0 ]] && echo "autopush done successfully."
	[[ "$#" -eq 1 ]] && cd -
}

# automatic remote pull
autopull(){
	[[ "$#" -eq 1 ]] && cd "$1"
	if [[ ! -d '.git' ]] && [[ ! -d '../.git' ]]; then
		echo "$(tput bold)$(pwd)$(tput sgr0) is not a git directory." && return 1
	fi

	git pull
	[[ "$?" -eq 0 ]] && echo "autopull done successfully."
	[[ "$#" -eq 1 ]] && cd -
}

# find extension
findx(){
	find . -name "*.$1"
}

# Which branch?
# Check which branch a repository is in without moving to it.
# If $1: print $1 branch
# If no $1, loop over subdirectories
wb(){
    cd_and_print_branch(){
        cd "$1" || return 1
        # alternative: rev-parse --abbrev-ref HEAD
        echo "$(tput bold)$(git branch 2> /dev/null | sed -e '/^[^*]/d' )$(tput sgr0)"
        cd -
    }
    if [[ "$#" -eq 0 ]]; then
        dirs=( $(find . -maxdepth 1 -type d ) )
        for dir in "${dirs[@]}"; do
            echo "${dir}: "
            cd_and_print_branch "${dir}"
        done
    elif [[ "$#" -eq 1 ]]; then
        cd_and_print_branch "${1}"
    fi
}

# Find and go to (or parent directory if argument is not a directory) 
# $1: name of the directory/file to go to 
goto(){
    # TODO: use excluded dirs to skip special directories
#     excluded_dirs=("BUILD" "obj" "bin") 
    # use find to get results, excluce hidden files/directories
    results=( $(find . -iname "${1}" -not -path '*/\.*' ) )

    # cd to parent directory if it's not a directory
    change_directory(){
        if [[ -d "${1}" ]]; then
            cd "${1}"
        else 
            cd $(dirname "${1}")
        fi
    }

    # only one result found
    if [[ ${#results[@]} -eq 1 ]]; then
        change_directory "${results[0]}"

    elif [[ "${#results[@]}" -ne 0 ]]; then
        for i in $(seq 0 $((${#results[@]} - 1))); do
            echo "${i}: ${results[${i}]}"
        done
        read  -p "Your choice: " choice
        if [[ "$choice" -lt ${#results[@]} ]] && [[ "$choice" -ge 0 ]]; then
            # cd to parent directory if it's not a directory
            change_directory "${results[${choice}]}"
        else
            echo "Invalid choice."
        fi
    else
        echo "No directory/file found."
    fi
}

if [[ "$(hostname)" == *"sonu"* ]]; then
    # Create a Gitlab repository
    # $1: name of the repo
    # $2 (optional): access token, if not specified, 
    # function looks in ~/.gitlab-init-repo_token file
    gitlab-init-repo(){
        repo="${1}"
        if [[ "$#" -eq 2 ]]; then
            token="${2}"
        else
            if [[ -f ~/.gitlab-init-repo_token ]]; then
                token=$(cat ~/.gitlab-init-repo_token) # XXX
            else
                echo "No token found."
                return
            fi
        fi
        test -z "${repo}" && echo "Repo name required." 1>&2 && return
        curl -H "Content-Type:application/json" https://gitlab.com/api/v3/projects?private_token=$token -d \
        "{ \
           \"name\": \"$repo\" ,\
           \"approvals_before_merge\": \"1\",  \
           \"container_registry_enabled\": \"false\", \
           \"snippets_enabled\":  \"false\", \
           \"builds_enabled\": \"false\",
           \"wiki_enabled\": \"false\",
           \"shared_runners_enabled\": \"false\" \
         }"|jq
    }
fi

# List todos found in files under a maximum depth (default 1) starting from current wd
# TODO: add arg to specify path
list-todos(){
   print_todos_in_file(){
       grep -lni "todo" "${1}"
   }
   if [[ "$#" -eq 1 ]]; then
       files=( $(find . -maxdepth "${1}" -type f) )
       for file in "${files[@]}"; do
           print_todos_in_file "${file}"
       done
   else
       for file in *; do
           [[ -f "${file}" ]] && print_todos_in_file "${file}"
       done
   fi
}

google(){
    search_query=$(echo "$@"| sed 's/ /+/g')
    [[ -f "/usr/lib/python2.7/webbrowser.py" ]] && /usr/lib/python2.7/webbrowser.py -t "http://google.com/search?q=${search_query}" ||Â echo "Python webbrowser module not found."
}

load_bicon(){
    if ! [[ "$(ps -p $(ps -p $(echo $$) -o ppid=) -o comm=)" =~ 'bicon'* ]]; then
        bicon.bin
    fi
}

# extract function prototypes from C/C++ files
prototypes(){
    ctags -x --c-kinds=fp "${@}"
}

# wget on github file URL
# no checks performed, be wise enough
wgit(){
    wget "$(echo "${1}"|sed -e 's/blob/raw/g')" ${@:2}
}

# extract the last messages of a device from the Sigfox backend
# $1: Device ID (optional)
# format:
# 	2018-02-27 16:31:30	0ba23ed00743cf2ea015d829
#   2018-02-27 16:13:14	0ba053f007f85e2d80ad01b5
#   2018-02-27 16:07:00	cc55643b0c9c4000
# Possible enhacements: decode messages
sigfox_backend(){
    if [[ "$#" -ne 1 ]]; then
        echo -n "Enter the device ID: "
        read device
    else
        device="${1}"
    fi
    username=$(head -n 1 ~/sigfox_api.txt)
    password=$(tail -n 1 ~/sigfox_api.txt)
	curl -H 'Cache-Control: no-cache' -u "${username}:${password}" "https://backend.sigfox.com/api/devicetypes/58d3c2259058c2146a39ed3a/messages"|	
    jq  -r -C ".data[] |select(.device=\"${device}\")|[.time, .data]| @tsv"| 
    perl -pe 'use POSIX qw(strftime); s/^(\d+)/strftime "%F %H:%M:%S", localtime($1)/e'|less -R
}
